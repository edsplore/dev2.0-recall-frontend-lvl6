-- Steps to replicate database

--1//

-- Create our tables
CREATE TABLE public.user_dialing_credits (
    "userId" uuid NOT NULL PRIMARY KEY,
    dialing_credits integer DEFAULT 200,
    email text,
    retell_api_key text
);

CREATE TABLE public.campaigns (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text,
    description text,
    "agentId" text,
    "outboundNumber" text,
    status text,
    progress integer,
    "hasRun" boolean DEFAULT false,
    "userId" uuid,
    "localTouchEnabled" boolean DEFAULT false
);

CREATE TABLE public.contacts (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "campaignId" integer,
    "phoneNumber" text NOT NULL,
    "firstName" text NOT NULL,
    "callId" text,
    "dynamicVariables" jsonb
);

CREATE TABLE public.call_logs (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "campaignId" integer,
    "phoneNumber" text NOT NULL,
    "firstName" text NOT NULL,
    "callId" text NOT NULL,
    disconnection_reason text,
    call_transcript text,
    call_summary text,
    call_recording text,
    start_time timestamp without time zone,
    call_duration real,
    user_sentiment text,
    end_time timestamp without time zone,
    call_direction text,
    "contactId" integer
);

-- Add foreign key constraints
ALTER TABLE ONLY public.call_logs
    ADD CONSTRAINT call_logs_campaignid_fkey FOREIGN KEY ("campaignId") REFERENCES public.campaigns(id);

ALTER TABLE ONLY public.call_logs
    ADD CONSTRAINT "call_logs_contactId_fkey" FOREIGN KEY ("contactId") REFERENCES public.contacts(id);

ALTER TABLE ONLY public.campaigns
    ADD CONSTRAINT "campaigns_userId_fkey" FOREIGN KEY ("userId") REFERENCES auth.users(id);

ALTER TABLE ONLY public.contacts
    ADD CONSTRAINT contacts_campaignid_fkey FOREIGN KEY ("campaignId") REFERENCES public.campaigns(id);

ALTER TABLE ONLY public.user_dialing_credits
    ADD CONSTRAINT user_dialing_credits_user_id_fkey FOREIGN KEY ("userId") REFERENCES auth.users(id) ON DELETE CASCADE;

-- Create indexes
CREATE INDEX idx_call_logs_call_id ON public.call_logs USING btree ("callId");
CREATE INDEX idx_call_logs_campaignid ON public.call_logs USING btree ("campaignId");
CREATE INDEX idx_campaigns_userid ON public.campaigns USING btree ("userId");
CREATE INDEX idx_contacts_campaignid ON public.contacts USING btree ("campaignId");

-- Enable RLS
ALTER TABLE public.call_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_dialing_credits ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their own campaigns" ON public.campaigns
    FOR SELECT USING (auth.uid() = "userId"::uuid);

CREATE POLICY "Users can create their own campaigns" ON public.campaigns
    FOR INSERT WITH CHECK (auth.uid() = "userId"::uuid);

CREATE POLICY "Users can update their own campaigns" ON public.campaigns
    FOR UPDATE USING (auth.uid() = "userId"::uuid);

CREATE POLICY "Users can delete their own campaigns" ON public.campaigns
    FOR DELETE USING (auth.uid() = "userId"::uuid);

CREATE POLICY "Users can view contacts of their campaigns" ON public.contacts
    FOR SELECT USING (EXISTS (
        SELECT 1 FROM public.campaigns 
        WHERE campaigns.id = contacts."campaignId" 
        AND campaigns."userId" = auth.uid()
    ));

CREATE POLICY "Users can manage contacts of their campaigns" ON public.contacts
    FOR ALL USING (EXISTS (
        SELECT 1 FROM public.campaigns 
        WHERE campaigns.id = contacts."campaignId" 
        AND campaigns."userId" = auth.uid()
    ));

CREATE POLICY "Users can view their call logs" ON public.call_logs
    FOR SELECT USING (EXISTS (
        SELECT 1 FROM public.campaigns 
        WHERE campaigns.id = call_logs."campaignId" 
        AND campaigns."userId" = auth.uid()
    ));

CREATE POLICY "Users can manage their call logs" ON public.call_logs
    FOR ALL USING (EXISTS (
        SELECT 1 FROM public.campaigns 
        WHERE campaigns.id = call_logs."campaignId" 
        AND campaigns."userId" = auth.uid()
    ));

CREATE POLICY "Users can view their own credits" ON public.user_dialing_credits
    FOR SELECT USING (auth.uid() = "userId");

CREATE POLICY "Users can update their own credits" ON public.user_dialing_credits
    FOR UPDATE USING (auth.uid() = "userId");

CREATE POLICY "Users can insert their own credits" ON public.user_dialing_credits
    FOR INSERT WITH CHECK (auth.uid() = "userId");

-- Create functions
CREATE OR REPLACE FUNCTION public.decrement_dialing_credits(user_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
  update user_dialing_credits
  set dialing_credits = dialing_credits - 1
  where "userId" = user_id;
end;
$$;

CREATE OR REPLACE FUNCTION public.increment_dialing_credits(user_id uuid, credit_amount integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
  update user_dialing_credits
  set dialing_credits = dialing_credits + credit_amount
  where "userId" = user_id;
end;
$$;

CREATE OR REPLACE FUNCTION public.set_user_id() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  NEW.userId = auth.uid();
  RETURN NEW;
END;
$$;

-- Create trigger
CREATE TRIGGER set_campaign_user_id BEFORE INSERT ON public.campaigns
    FOR EACH ROW EXECUTE FUNCTION public.set_user_id();

-- 2//

-- Add the userid text column to campaigns table
ALTER TABLE public.campaigns ADD COLUMN userid text;

-- 3// foreign key constraints (establishing relationships between tables - cascading etc )

-- First drop existing foreign key constraints
ALTER TABLE public.call_logs DROP CONSTRAINT IF EXISTS call_logs_campaignid_fkey;
ALTER TABLE public.call_logs DROP CONSTRAINT IF EXISTS "call_logs_contactId_fkey";
ALTER TABLE public.contacts DROP CONSTRAINT IF EXISTS contacts_campaignid_fkey;

-- Re-add the constraints with CASCADE rules
ALTER TABLE ONLY public.call_logs
    ADD CONSTRAINT call_logs_campaignid_fkey 
    FOREIGN KEY ("campaignId") 
    REFERENCES public.campaigns(id) 
    ON DELETE CASCADE;

ALTER TABLE ONLY public.call_logs
    ADD CONSTRAINT "call_logs_contactId_fkey" 
    FOREIGN KEY ("contactId") 
    REFERENCES public.contacts(id) 
    ON DELETE CASCADE;

ALTER TABLE ONLY public.contacts
    ADD CONSTRAINT contacts_campaignid_fkey 
    FOREIGN KEY ("campaignId") 
    REFERENCES public.campaigns(id) 
    ON DELETE CASCADE;


-- 4 // Enable Email Auth and disable RLS 
 -- to disable RLS go to database then policies and then disable row level security for each table 